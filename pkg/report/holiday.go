package report

import (
	"context"
	"fmt"
	"strings"
	"time"

	"golang.org/x/text/language"
	"golang.org/x/text/message"

	"github.com/sushkevichd/day-guide-telegram-bot/pkg/domain"
)

const holidayMessageSetupPrompt = `
–°–æ–∑–¥–∞–π –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞.
–í–∫–ª—é—á–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏, –∑–∞—Ç–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–ø–æ–º–µ—Å—Ç–∏ * —Å –æ–±–æ–∏—Ö —Å—Ç–æ—Ä–æ–Ω), –∏ –¥–æ–±–∞–≤—å –ø–∞—Ä—É —Å–ª–æ–≤ –æ—Ç —Å–µ–±—è.
`

type HolidaysFetcher interface {
	FetchByDate(ctx context.Context, date time.Time) ([]domain.Holiday, error)
}

type HolidaysFormatter interface {
	Format(holidays []domain.Holiday) string
}

type HolidaysAIResponseGenerator interface {
	GenerateTextResponse(task, text string) (string, error)
}

type holiday struct {
	fetcher     HolidaysFetcher
	aiGenerator HolidaysAIResponseGenerator
}

func NewHoliday(
	fetcher HolidaysFetcher,
	aiGenerator HolidaysAIResponseGenerator,
) *holiday {
	return &holiday{
		fetcher:     fetcher,
		aiGenerator: aiGenerator,
	}
}

func (h *holiday) Generate(ctx context.Context) (string, error) {
	now := time.Now()

	holidays, err := h.fetcher.FetchByDate(ctx, now)
	if err != nil {
		return "", fmt.Errorf("fetching holidays for date %s: %v", now, err)
	}

	if len(holidays) == 0 {
		return "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –æ–±—ã—á–Ω—ã–º –¥–Ω—ë–º!", nil
	}

	holidaysStr := joinHolidays(holidays)

	generatedStr, err := h.aiGenerator.GenerateTextResponse(holidayMessageSetupPrompt, holidaysStr)
	if err != nil {
		return "", fmt.Errorf("generating holidays response with AI: %v", err)
	}

	resp := fmt.Sprintf("üéâ *–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ %s* üéâ\n\n", formatDate(now)) + generatedStr
	return resp, nil
}

func joinHolidays(holidays []domain.Holiday) string {
	names := make([]string, 0, len(holidays))
	for _, holiday := range holidays {
		names = append(names, holiday.Name)
	}

	return strings.Join(names, "\n")
}

// TODO: create formatter
func formatDate(t time.Time) string {
	p := message.NewPrinter(language.Russian)
	return p.Sprintf("%d %s", t.Day(), russianMonths()[t.Month()-1])
}

func russianMonths() []string {
	return []string{
		"—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è",
		"–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è",
	}
}
