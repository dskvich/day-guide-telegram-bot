package report

import (
	"context"
	"fmt"
	"strings"
	"time"

	"golang.org/x/text/language"
	"golang.org/x/text/message"

	"github.com/sushkevichd/day-guide-telegram-bot/pkg/domain"
)

type HolidaysFetcher interface {
	FetchByDate(ctx context.Context, date time.Time) ([]domain.Holiday, error)
}

type HolidaysFormatter interface {
	Format(holidays []domain.Holiday) string
}

type holiday struct {
	fetcher HolidaysFetcher
}

func NewHoliday(
	fetcher HolidaysFetcher,
) *holiday {
	return &holiday{
		fetcher: fetcher,
	}
}

func (h *holiday) Generate(ctx context.Context) (string, error) {
	now := time.Now()

	holidays, err := h.fetcher.FetchByDate(ctx, now)
	if err != nil {
		return "", fmt.Errorf("fetching holidays for date %s: %v", now, err)
	}

	if len(holidays) == 0 {
		return "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –æ–±—ã—á–Ω—ã–º –¥–Ω—ë–º!", nil
	}

	holidaysStr := joinHolidays(holidays)

	resp := fmt.Sprintf("üéâ *%s: –ö–∞–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –æ—Ç–º–µ—á–∞–µ–º?* üéâ\n\n", formatDate(now)) + holidaysStr
	return resp, nil
}

func joinHolidays(holidays []domain.Holiday) string {
	names := make([]string, 0, len(holidays))
	for _, holiday := range holidays {
		var icons string
		for _, category := range holiday.Categories {
			icons += getEmoji(category)
		}
		names = append(names, fmt.Sprintf("%s %s", icons, holiday.Name))
	}

	return strings.Join(names, "\n")
}

func getEmoji(category string) string {
	switch category {
	case "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏":
		return "üåç"
	case "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –†–æ—Å—Å–∏–∏":
		return "üá∑üá∫"
	case "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–ª–∞–≤—è–Ω":
		return "ü™Ü"
	case "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –û–û–ù":
		return "ü§ù"
	case "–ü—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏":
		return "‚úùÔ∏è"
	default:
		return "‚ùì"
	}
}

// TODO: create formatter
func formatDate(t time.Time) string {
	p := message.NewPrinter(language.Russian)
	return p.Sprintf("%d %s", t.Day(), russianMonths()[t.Month()-1])
}

func russianMonths() []string {
	return []string{
		"—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è",
		"–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è",
	}
}
