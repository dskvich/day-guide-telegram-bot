name: Deploy to DigitalOcean Droplet

on:
  push:
    branches: [ main ]

env:
  CONTAINER_REGISTRY: registry.digitalocean.com/dmsuhub
  IMAGE_NAME: day-guide-telegram-bot

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build container image
        run: docker build -t $CONTAINER_REGISTRY/$IMAGE_NAME:$GITHUB_SHA .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: docker push $CONTAINER_REGISTRY/$IMAGE_NAME:$GITHUB_SHA

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to Digital Ocean droplet via SSH
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: IMAGE_NAME,CONTAINER_REGISTRY,GITHUB_SHA
          script: |
            echo "Logging into Digital Ocean Registry..."
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            docker pull $CONTAINER_REGISTRY/$IMAGE_NAME:$GITHUB_SHA || { echo "Failed to pull Docker image."; exit 1; }

            docker stop $IMAGE_NAME || echo "No existing container to stop."
            docker rm $IMAGE_NAME || echo "No existing container to remove."
            
            docker network create my-network || echo "Network already exists."
            
            echo "Starting new Docker container..."
            docker run -d \
            --name $IMAGE_NAME \
            -e TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
            -e TELEGRAM_AUTHORIZED_USER_IDS="${{ vars.TELEGRAM_AUTHORIZED_USER_IDS }}" \
            -e OPEN_WEATHER_MAP_API_KEY="${{ secrets.OPEN_WEATHER_MAP_API_KEY }}" \
            -e OPEN_EXCHANGE_RATES_APP_ID="${{ secrets.OPEN_EXCHANGE_RATES_APP_ID }}" \
            -v /app/day-guide.db:/app/day-guide.db \
            --network my-network \
            $CONTAINER_REGISTRY/$IMAGE_NAME:$GITHUB_SHA
            
            #echo "Cleaning up..."
            #docker system prune -a -f
            
            RETRY=5
            while [ $RETRY -gt 0 ]; do
              if docker ps | grep -q $IMAGE_NAME; then
                echo "Container $IMAGE_NAME started successfully."
                break
              else
                ((RETRY--))
                echo "Waiting for the container to start. Retries left: $RETRY"
                sleep 5
              fi
            done
            
            if [ $RETRY -eq 0 ]
            then
              echo "Container $IMAGE_NAME failed to start."
              exit 1
            fi